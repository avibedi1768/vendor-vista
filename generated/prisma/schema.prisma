// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  role      Role     @default(CUSTOMER)
  address   String   @default("")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String   @default("")
  lastName  String   @default("")

  // carts  Cart?
  orders Order[]

  // shops     Shop[]
  shop Shop? // 1:1 to shop
}

model Product {
  id          String   @id @default(uuid())
  name        String   @default("")
  description String   @default("")
  price       Decimal
  image       String?
  stock       Int
  updatedAt   DateTime @updatedAt

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  // cartItems  CartItem[]
  orderItems OrderItem[]
  // inShops     ProductOnShop[]
}

// model ProductOnShop {
//   productId String
//   shopId    String
//   product   Product @relation(fields: [productId], references: [id])
//   shop      Shop    @relation(fields: [shopId], references: [id])

//   @@id([productId, shopId])
// }

model Shop {
  id        String   @id // same as userId (vendor)
  // vendorId  String
  // shopUrl   String   @default("")
  name      String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // metaData  Json?

  orders    Order[]
  // products  ProductOnShop[]
  // vendor    User            @relation(fields: [vendorId], references: [id])
  vendor    User      @relation(fields: [id], references: [id])
  productId Product[]
}

// model Cart {
//   id         String     @id @default(uuid())
//   customerId String     @unique
//   createdAt  DateTime   @default(now())
//   customer   User       @relation(fields: [customerId], references: [id])
//   cartItems  CartItem[]
// }

// model CartItem {
//   id        String  @id @default(uuid())
//   cartId    String
//   productId String
//   quantity  Int
//   cart      Cart    @relation(fields: [cartId], references: [id])
//   product   Product @relation(fields: [productId], references: [id])
// }

model Order {
  id          String      @id @default(uuid())
  customerId  String
  shopId      String
  totalAmount Int
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  customer    User        @relation(fields: [customerId], references: [id])
  shop        Shop        @relation(fields: [shopId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  CUSTOMER
  VENDOR
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}
